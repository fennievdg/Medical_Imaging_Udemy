{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"model.py","provenance":[],"authorship_tag":"ABX9TyMpaGA0bPnevaHZHMbYhRg8"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"oiV62OIZu1aL"},"outputs":[],"source":["import torch\n","\n","class DoubleConv(torch.nn.Module):\n","    \"\"\"\n","    Helper Class which implements the intermediate Convolutions\n","    \"\"\"\n","    def __init__(self, in_channels, out_channels):\n","        \n","        super().__init__()\n","        self.step = torch.nn.Sequential(torch.nn.Conv2d(in_channels, out_channels, 3, padding=1),\n","                                        torch.nn.ReLU(),\n","                                        torch.nn.Conv2d(out_channels, out_channels, 3, padding=1),\n","                                        torch.nn.ReLU())\n","        \n","    def forward(self, X):\n","        return self.step(X)\n","\n","\n","class UNet(torch.nn.Module):\n","    \"\"\"\n","    This class implements a UNet for the Segmentation\n","    We use 3 down- and 3 UpConvolutions and two Convolutions in each step\n","    \"\"\"\n","\n","    def __init__(self):\n","        \"\"\"Sets up the U-Net Structure\n","        \"\"\"\n","        super().__init__()\n","        \n","        \n","        ############# DOWN #####################\n","        self.layer1 = DoubleConv(1, 64)\n","        self.layer2 = DoubleConv(64, 128)\n","        self.layer3 = DoubleConv(128, 256)\n","        self.layer4 = DoubleConv(256, 512)\n","\n","        #########################################\n","\n","        ############## UP #######################\n","        self.layer5 = DoubleConv(512 + 256, 256)\n","        self.layer6 = DoubleConv(256+128, 128)\n","        self.layer7 = DoubleConv(128+64, 64)\n","        self.layer8 = torch.nn.Conv2d(64, 1, 1)\n","        #########################################\n","\n","        self.maxpool = torch.nn.MaxPool2d(2)\n","\n","    def forward(self, x):\n","        \n","        ####### DownConv 1#########\n","        x1 = self.layer1(x)\n","        x1m = self.maxpool(x1)\n","        ###########################\n","        \n","        ####### DownConv 2#########        \n","        x2 = self.layer2(x1m)\n","        x2m = self.maxpool(x2)\n","        ###########################\n","\n","        ####### DownConv 3#########        \n","        x3 = self.layer3(x2m)\n","        x3m = self.maxpool(x3)\n","        ###########################\n","        \n","        ##### Intermediate Layer ## \n","        x4 = self.layer4(x3m)\n","        ###########################\n","\n","        ####### UpCONV 1#########        \n","        x5 = torch.nn.Upsample(scale_factor=2, mode=\"bilinear\")(x4)  # Upsample with a factor of 2\n","        #x5 = torch.nn.ConvTranspose2d(512, 512, 2, 2)(x4)\n","        x5 = torch.cat([x5, x3], dim=1)  # Skip-Connection\n","        x5 = self.layer5(x5)\n","        ###########################\n","\n","        ####### UpCONV 2#########        \n","        x6 = torch.nn.Upsample(scale_factor=2, mode=\"bilinear\")(x5)        \n","        #x6 = torch.nn.ConvTranspose2d(256, 256, 2, 2)(x5)\n","        x6 = torch.cat([x6, x2], dim=1)  # Skip-Connection    \n","        x6 = self.layer6(x6)\n","        ###########################\n","        \n","        ####### UpCONV 3#########        \n","        x7 = torch.nn.Upsample(scale_factor=2, mode=\"bilinear\")(x6)\n","        #x7 = torch.nn.ConvTranspose2d(128, 128, 2, 2)(x6)\n","        x7 = torch.cat([x7, x1], dim=1)       \n","        x7 = self.layer7(x7)\n","        ###########################\n","        \n","        ####### Predicted segmentation#########        \n","        ret = self.layer8(x7)\n","        return ret"]}]}